#ifndef __TEST_FIRMWARE_CONFIG_H
#define __TEST_FIRMWARE_CONFIG_H

#include <stdbool.h>
#include <stdint.h>

// Simple python script to calculate the below table according to idk how its
// called plz look up Stevens' power law
//
// steps = 256
// min_pwm = 0       # fully on
// max_pwm = 16010   # fully off
// exponent = 0.4
// table = []
// for x in range(steps):
//     norm = x / (steps - 1)            # normalize 0..1
//     val = norm ** (1 / exponent)      # apply Stevens' power law
//     pwm_val = round(max_pwm - val * (max_pwm - min_pwm))  # invert and scale
//     table.append(pwm_val)
// print(table)

// Controlls the brightness ramp. 0 = dimmest possible on state, 255 = fully on.
// Code will linearly go though this table when changing brightness.
static const uint16_t brightness_steps[256] =
    // {
    // 16010, 16010, 16010, 16010, 16010, 16010, 16010, 16010, 16010, 16010,
    // 16010, 16010, 16009, 16009, 16009, 16009, 16008, 16008, 16008, 16007,
    // 16007, 16006, 16005, 16005, 16004, 16003, 16002, 16001, 16000, 15999,
    // 15997, 15996, 15994, 15992, 15991, 15989, 15987, 15984, 15982, 15979,
    // 15977, 15974, 15971, 15968, 15964, 15961, 15957, 15953, 15949, 15944,
    // 15940, 15935, 15930, 15925, 15919, 15914, 15908, 15901, 15895, 15888,
    // 15881, 15874, 15866, 15859, 15850, 15842, 15833, 15824, 15815, 15805,
    // 15795, 15784, 15774, 15762, 15751, 15739, 15727, 15714, 15701, 15688,
    // 15674, 15660, 15645, 15630, 15615, 15599, 15583, 15566, 15548, 15531,
    // 15513, 15494, 15475, 15455, 15435, 15414, 15393, 15371, 15349, 15327,
    // 15303, 15279, 15255, 15230, 15205, 15178, 15152, 15124, 15097, 15068,
    // 15039, 15009, 14979, 14948, 14916, 14884, 14851, 14817, 14783, 14748,
    // 14712, 14676, 14639, 14601, 14562, 14523, 14483, 14442, 14401, 14358,
    // 14315, 14272, 14227, 14181, 14135, 14088, 14040, 13992, 13942, 13892,
    // 13841, 13788, 13736, 13682, 13627, 13571, 13515, 13457, 13399, 13340,
    // 13280, 13218, 13156, 13093, 13029, 12964, 12898, 12831, 12763, 12694,
    // 12624, 12553, 12481, 12408, 12334, 12259, 12182, 12105, 12026, 11947,
    // 11866, 11784, 11701, 11617, 11532, 11446, 11358, 11269, 11180, 11088,
    // 10996, 10903, 10808, 10712, 10615, 10517, 10417, 10316, 10214, 10111,
    // 10006, 9900,  9793,  9684,  9574,  9463,  9350,  9237, 9121,  9005, 8887,
    // 8767,  8646,  8524,  8400,  8275,  8149,  8021,  7892, 7761,  7629, 7495,
    // 7359,  7223,  7084,  6945,  6803,  6660,  6516,  6370, 6223,  6074, 5923,
    // 5771,  5617,  5461,  5304,  5145,  4985,  4823,  4659, 4494,  4327, 4158,
    // 3988,  3816,  3642,  3467,  3289,  3110,  2929,  2747, 2562,  2376, 2188,
    // 1999,  1807,  1614,  1419,  1222,  1023,  822,   619, 415,   208,   0};
    // {16010, 16010, 16010, 16010, 16009, 16009, 16009, 16008, 16007, 16006,
    //  16005, 16004, 16002, 16000, 15998, 15996, 15993, 15991, 15988, 15984,
    //  15981, 15977, 15972, 15968, 15963, 15958, 15952, 15947, 15940, 15934,
    //  15927, 15920, 15913, 15905, 15896, 15888, 15879, 15870, 15860, 15850,
    //  15840, 15829, 15818, 15807, 15795, 15783, 15771, 15758, 15745, 15731,
    //  15717, 15703, 15689, 15674, 15659, 15643, 15627, 15611, 15594, 15578,
    //  15560, 15543, 15525, 15507, 15488, 15470, 15451, 15431, 15412, 15392,
    //  15371, 15351, 15330, 15309, 15287, 15266, 15244, 15222, 15199, 15176,
    //  15153, 15130, 15106, 15083, 15059, 15034, 15010, 14985, 14960, 14934,
    //  14909, 14883, 14857, 14831, 14804, 14777, 14750, 14723, 14696, 14668,
    //  14640, 14612, 14583, 14555, 14526, 14496, 14467, 14437, 14407, 14377,
    //  14347, 14316, 14285, 14254, 14223, 14191, 14159, 14127, 14094, 14061,
    //  14028, 13995, 13961, 13927, 13893, 13858, 13823, 13788, 13752, 13716,
    //  13680, 13644, 13606, 13569, 13531, 13493, 13455, 13416, 13376, 13336,
    //  13296, 13255, 13214, 13172, 13130, 13087, 13044, 13000, 12956, 12911,
    //  12866, 12820, 12773, 12726, 12678, 12630, 12581, 12531, 12480, 12429,
    //  12377, 12324, 12271, 12217, 12161, 12106, 12049, 11991, 11933, 11873,
    //  11813, 11752, 11689, 11626, 11562, 11496, 11430, 11362, 11294, 11224,
    //  11153, 11081, 11007, 10932, 10857, 10779, 10701, 10621, 10539, 10456,
    //  10372, 10286, 10199, 10110, 10020, 9928,  9834,  9739,  9642,  9543,
    //  9442,  9340,  9235,  9129,  9021,  8910,  8798,  8684,  8568,  8449,
    //  8329,  8206,  8081,  7953,  7823,  7691,  7557,  7420,  7280,  7138,
    //  6993,  6846,  6696,  6543,  6388,  6229,  6068,  5904,  5737,  5567,
    //  5393,  5217,  5037,  4855,  4668,  4479,  4286,  4090,  3890,  3687,
    //  3480,  3270,  3056,  2838,  2616,  2391,  2161,  1928,  1690,  1449,
    //  1203,  953,   699,   440,   178,   0};

    // {16010, 16010, 16010, 16010, 16009, 16009, 16008, 16007, 16006, 16005,
    //  16004, 16002, 16001, 15999, 15997, 15994, 15992, 15989, 15986, 15982,
    //  15979, 15975, 15971, 15966, 15962, 15957, 15952, 15946, 15940, 15934,
    //  15928, 15921, 15914, 15906, 15898, 15890, 15882, 15873, 15864, 15854,
    //  15844, 15834, 15823, 15812, 15801, 15789, 15777, 15764, 15751, 15737,
    //  15724, 15709, 15695, 15680, 15664, 15648, 15632, 15615, 15598, 15580,
    //  15562, 15543, 15524, 15505, 15485, 15464, 15443, 15422, 15400, 15378,
    //  15355, 15332, 15308, 15284, 15259, 15234, 15208, 15182, 15155, 15127,
    //  15100, 15071, 15042, 15013, 14983, 14952, 14921, 14890, 14858, 14825,
    //  14792, 14758, 14724, 14689, 14654, 14618, 14581, 14544, 14506, 14468,
    //  14429, 14390, 14350, 14309, 14268, 14226, 14184, 14141, 14097, 14053,
    //  14009, 13963, 13917, 13871, 13823, 13775, 13727, 13678, 13628, 13578,
    //  13527, 13475, 13423, 13370, 13317, 13262, 13207, 13152, 13096, 13039,
    //  12982, 12923, 12865, 12805, 12745, 12684, 12623, 12561, 12498, 12434,
    //  12370, 12305, 12240, 12173, 12106, 12039, 11970, 11901, 11832, 11761,
    //  11690, 11618, 11546, 11472, 11398, 11323, 11248, 11172, 11095, 11017,
    //  10939, 10860, 10780, 10699, 10618, 10536, 10453, 10370, 10285, 10200,
    //  10114, 10028, 9940,  9852,  9764,  9674,  9584,  9492,  9400,  9308,
    //  9214,  9120,  9025,  8929,  8833,  8735,  8637,  8538,  8438,  8338,
    //  8236,  8134,  8031,  7928,  7823,  7718,  7611,  7504,  7397,  7288,
    //  7179,  7068,  6957,  6845,  6733,  6619,  6505,  6389,  6273,  6157,
    //  6039,  5920,  5801,  5681,  5560,  5438,  5315,  5191,  5067,  4941,
    //  4815,  4688,  4560,  4431,  4302,  4171,  4040,  3907,  3774,  3640,
    //  3505,  3370,  3233,  3095,  2957,  2818,  2677,  2536,  2394,  2252,
    //  2108,  1963,  1818,  1671,  1524,  1375,  1226,  1076,  925,   773,
    //  620,   467,   312,   156,   55,    0};
    // {16010, 16010, 16010, 16009, 16009, 16009, 16008, 16007, 16006, 16005,
    //  16003, 16002, 16000, 15998, 15995, 15992, 15989, 15986, 15983, 15979,
    //  15975, 15970, 15965, 15960, 15955, 15949, 15942, 15936, 15929, 15921,
    //  15914, 15905, 15897, 15888, 15878, 15868, 15858, 15847, 15836, 15824,
    //  15812, 15799, 15786, 15773, 15758, 15744, 15729, 15713, 15697, 15680,
    //  15663, 15645, 15627, 15608, 15589, 15569, 15549, 15528, 15506, 15484,
    //  15462, 15439, 15415, 15390, 15365, 15340, 15314, 15287, 15260, 15232,
    //  15204, 15175, 15145, 15115, 15084, 15052, 15020, 14988, 14954, 14920,
    //  14886, 14851, 14815, 14778, 14741, 14704, 14665, 14626, 14587, 14547,
    //  14506, 14464, 14422, 14380, 14336, 14292, 14248, 14202, 14156, 14110,
    //  14063, 14015, 13966, 13917, 13867, 13817, 13766, 13714, 13662, 13609,
    //  13555, 13501, 13446, 13391, 13335, 13278, 13220, 13162, 13104, 13044,
    //  12984, 12924, 12862, 12800, 12738, 12675, 12611, 12547, 12482, 12416,
    //  12350, 12283, 12215, 12147, 12078, 12009, 11939, 11868, 11797, 11725,
    //  11653, 11580, 11506, 11432, 11357, 11281, 11205, 11129, 11051, 10973,
    //  10895, 10816, 10736, 10656, 10575, 10494, 10412, 10329, 10246, 10163,
    //  10078, 9994,  9908,  9822,  9736,  9649,  9561,  9473,  9384,  9295,
    //  9205,  9115,  9024,  8932,  8840,  8748,  8655,  8561,  8467,  8373,
    //  8277,  8182,  8086,  7989,  7892,  7794,  7696,  7597,  7498,  7398,
    //  7298,  7197,  7096,  6995,  6893,  6790,  6687,  6583,  6479,  6375,
    //  6270,  6165,  6059,  5952,  5846,  5738,  5631,  5523,  5414,  5305,
    //  5196,  5086,  4976,  4865,  4754,  4642,  4530,  4418,  4305,  4192,
    //  4079,  3965,  3850,  3736,  3620,  3505,  3389,  3273,  3156,  3039,
    //  2922,  2804,  2686,  2567,  2448,  2329,  2209,  2089,  1969,  1849,
    //  1728,  1606,  1485,  1363,  1240,  1118,  995,   872,   748,   624,
    //  500,   375,   251,   125,   55,    0};
    // {16010, 16009, 16008, 16006, 16004, 16002, 15999, 15996, 15993, 15989,
    //  15985, 15980, 15976, 15970, 15965, 15959, 15953, 15947, 15940, 15933,
    //  15926, 15919, 15911, 15903, 15895, 15886, 15878, 15869, 15859, 15850,
    //  15840, 15830, 15820, 15810, 15799, 15788, 15777, 15765, 15754, 15742,
    //  15730, 15718, 15705, 15692, 15679, 15666, 15653, 15639, 15625, 15611,
    //  15597, 15583, 15568, 15553, 15538, 15523, 15507, 15491, 15475, 15459,
    //  15443, 15426, 15409, 15392, 15375, 15358, 15340, 15322, 15304, 15285,
    //  15267, 15248, 15229, 15210, 15190, 15171, 15151, 15131, 15110, 15090,
    //  15069, 15048, 15026, 15005, 14983, 14961, 14939, 14916, 14893, 14870,
    //  14847, 14824, 14800, 14776, 14751, 14727, 14702, 14677, 14652, 14626,
    //  14600, 14574, 14547, 14521, 14494, 14466, 14439, 14411, 14382, 14354,
    //  14325, 14296, 14266, 14237, 14207, 14176, 14145, 14114, 14083, 14051,
    //  14019, 13986, 13953, 13920, 13886, 13852, 13818, 13783, 13748, 13712,
    //  13676, 13640, 13603, 13566, 13528, 13490, 13451, 13412, 13373, 13333,
    //  13292, 13251, 13210, 13168, 13125, 13082, 13039, 12995, 12950, 12905,
    //  12859, 12813, 12766, 12718, 12670, 12621, 12572, 12522, 12471, 12420,
    //  12368, 12315, 12261, 12207, 12152, 12097, 12040, 11983, 11925, 11866,
    //  11806, 11746, 11684, 11622, 11559, 11495, 11429, 11363, 11296, 11228,
    //  11159, 11089, 11018, 10945, 10872, 10797, 10722, 10645, 10566, 10487,
    //  10406, 10324, 10241, 10156, 10069, 9982,  9893,  9802,  9710,  9616,
    //  9520,  9423,  9324,  9223,  9121,  9016,  8910,  8802,  8692,  8579,
    //  8465,  8348,  8229,  8108,  7985,  7859,  7730,  7600,  7466,  7330,
    //  7191,  7049,  6904,  6756,  6605,  6450,  6293,  6132,  5967,  5799,
    //  5627,  5452,  5272,  5088,  4900,  4708,  4511,  4310,  4103,  3892,
    //  3676,  3454,  3227,  2995,  2756,  2511,  2261,  2003,  1739,  1468,
    //  1190,  904,   611,   310,   200,   0};

    {16010, 16010, 16009, 16008, 16006, 16005, 16002, 16000, 15997, 15994,
     15990, 15986, 15982, 15978, 15973, 15968, 15963, 15958, 15952, 15946,
     15940, 15934, 15927, 15920, 15913, 15906, 15899, 15892, 15884, 15876,
     15868, 15860, 15851, 15843, 15834, 15825, 15816, 15807, 15798, 15788,
     15779, 15769, 15759, 15749, 15738, 15728, 15718, 15707, 15696, 15685,
     15674, 15663, 15652, 15640, 15629, 15617, 15605, 15593, 15581, 15569,
     15557, 15544, 15532, 15519, 15506, 15494, 15481, 15467, 15454, 15441,
     15427, 15414, 15400, 15386, 15372, 15358, 15344, 15329, 15315, 15300,
     15285, 15271, 15256, 15240, 15225, 15210, 15194, 15179, 15163, 15147,
     15131, 15115, 15099, 15082, 15066, 15049, 15032, 15015, 14998, 14981,
     14964, 14946, 14929, 14911, 14893, 14875, 14856, 14838, 14819, 14801,
     14782, 14763, 14743, 14724, 14704, 14685, 14665, 14645, 14624, 14604,
     14583, 14562, 14541, 14520, 14498, 14477, 14455, 14433, 14410, 14388,
     14365, 14342, 14319, 14295, 14272, 14248, 14223, 14199, 14174, 14149,
     14124, 14098, 14072, 14046, 14019, 13992, 13965, 13938, 13910, 13882,
     13853, 13824, 13795, 13765, 13735, 13705, 13674, 13643, 13611, 13579,
     13547, 13514, 13480, 13446, 13412, 13377, 13341, 13305, 13268, 13231,
     13193, 13155, 13116, 13076, 13036, 12995, 12953, 12911, 12868, 12823,
     12779, 12733, 12687, 12639, 12591, 12542, 12492, 12440, 12388, 12335,
     12280, 12225, 12168, 12110, 12051, 11990, 11928, 11865, 11800, 11733,
     11665, 11595, 11524, 11451, 11376, 11298, 11219, 11138, 11054, 10969,
     10880, 10789, 10696, 10600, 10501, 10399, 10293, 10185, 10073, 9957,
     9837,  9714,  9586,  9454,  9317,  9175,  9027,  8875,  8716,  8552,
     8380,  8202,  8017,  7824,  7622,  7412,  7193,  6964,  6724,  6473,
     6209,  5933,  5643,  5339,  5018,  4681,  4325,  3949,  3551,  3131,
     2686,  2213,  1711,  1177,  608,   0};
// The minimum index from the above table, in the range 0..=255, for which
// the led will turn on from a fully off state
static const uint16_t min_brightness_dim_on = 175;
// The minimum period in milliseconds for the led to be off to be considered
// "fully off" (startup procedure is not done during this duration)
static const uint32_t min_brightness_min_period_ms = 100;
// The delay between steps of automatic rampdown,
// range 1..uint32_t::MAX_VALUE. Smaller = rampdown faster, larger = rampdown
// slower
static const uint32_t brightness_rampdown_delay_ms = 12;
// The delay between steps of automatic rampup, range 1..uint32_t::MAX_VALUE.
// Smaller = rampup faster, larger = rampup slower
static const uint32_t brightness_rampup_delay_ms = 7;
// The delay between steps of rampdown when user is pressing the touch
// button, range 1..uint32_t::MAX_VALUE. Smaller = rampdown faster, larger =
// rampdown slower
static const uint32_t brightness_touch_rampup_delay_ms = 11;
// The delay between steps of rampup when user is pressing the touch button,
// range 1..uint32_t::MAX_VALUE. Smaller = rampup faster, larger = rampup
// slower
static const uint32_t brightness_touch_rampdown_delay_ms = 11;
static const uint32_t turn_off_brightness_rampdown_delay_ms = 3;
// Duration after which the press is considered a long press and the
// brightness change starts.
static const uint32_t single_touch_duration_ms = 250;
// Initial brightness value on power-on, 0..=255, index to the brightness
// table.
static const uint16_t turn_on_brightness = 255;
// Flash the lights once with full brightness when powering up the lamp
static const bool led_blink_on_on = false;
// Enables test mode. Test mode will ramp brightness all the time even
// without touch input and will turn on the debug led, when enabled, when the
// touch sensor is pressed.
static const bool test_mode = false;

// Enable or disable the red debug led. Highly recommended to enable for test
// mode.
static const bool debug_led_enabled = test_mode || false;

// WARNING: The following settings are advanced and should probably be left
// at their defaults

// Timer prescaler. Changes PWM frequency. 48 in combination with a
// led_off_value of 16383 is around 60 Hz.
static const uint16_t timer_prescale = 0;
// Timer reset point / max led value (off) for the brightness table. Will
// affect PWM frequency. Highly suggested to leave as-is.
static const uint16_t led_off_value = 16383;
// Iterations of oversampling when meassuring touch inputs. Needs to be
// determined through experimentation. Higher = better accuracy, lower =
// faster touch response.
static const uint16_t touch_oversampling_iterations = 3000;
// Touch hysteresis: how many touch messurements need to be on for the sensor
// to be considered pressed, how many need to be off for the sensor to be
// considered depressed?
//
// Hysteresis, because if for example the value is 3 the
// messurements 111 will turn on the sensor, but 101 and 100 and 001 won't
// change the sensor to off again, only 000 does. Once it is off then, the
// values 101, 100, 011, ... won't change the sensor to on again, until a 111
// is encountered.
//
// Has a multiplicative effect with the previous value for touch
// responsiveness. Needs to be determined through experimentation.
static const uint8_t touch_hysteresis_window = 3;
// How many messurements to take to determine the idle value of the touch
// sensor when initialized. Deviations from the idle value to the top will be
// taken as touch inputs, so a good idle value is critical.
static const uint16_t touch_turn_on_calibration_count = 25;
// How many iterations to wait after the touch sensor is depressed to start
// re-calibrating the idle value automatically.
static const uint16_t touch_recalibrate_settle_iterations = 1000;
#endif
